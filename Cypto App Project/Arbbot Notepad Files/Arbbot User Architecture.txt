
Arbbot User Architecture

/* ============ User Journey ================= */

1. ==> User 'Signs up' at site's central landing page. 
ii. Select package and proceed to make payment. Once Payment is successful recieves a notification of successful payment with a token number (mightbe on page or by email or both) for subscription category.  'Continue' button redirects to request ARBBot setup, 'input payment token' field and button 'Request setup'. 

When picked: 
Silver package & Gold packages buttons --> redirects to make payment page.
Diamond & Legacy packages buttons --> requests for SAK (Special Access Key) token.

'Continue' button for Daimond & Legacy redirects to request ARBBot setup, (message:' Request set', button: 'send').

After ArbBot setup, user is sent link to access their App Instance. 


User on UserApp Instance:

Sign in. Navigates to Settings menu.

Fill in their name, email, subscription category (or maybe it is fectched from intial sign up backend data.), Payout address, 'Next' button (triggers registerUser() in Smart Contract. Redirects to Wallet Address page.
Fill in Wallet Address;  Token pair addresses. 'Set' button (Triggers setUserTokenPairAddresses() in Smart Contract. Redirects Start Trade page.

On Start Trade page 'Run Bot' button. Triggers startArbitrage() in Smart Contract.

Approve gas payment, meta mask method or other method. 

===========================================================================

Smart Contract Code Level

  
==> User registers on user app instance


function registerUser(
    string memory name,
    string memory email,
    SubscriptionPackage subscription,
    address payoutAddress,
    uint256 subscriptionDuration,
    uint256 diamondPayoutRate // Only for Diamond users
    ) external {
    require(subscriptionDuration > 0, "Subscription duration must be greater than 0");

    // Check if the user is eligible for Diamond status
    if (msg.sender == owner) {
    require(subscription == SubscriptionPackage.Diamond, "Only the owner can assign Diamond status");
    }

    // Calculate the subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Create a new user and store their information
    users[msg.sender] = User({
    name: name,
    email: email,
    subscription: subscription,
    payoutAddress: payoutAddress,
    subscriptionExpiry: expiryTimestamp
    });

    // Set the payout rate for Diamond users (if applicable)
    if (subscription == SubscriptionPackage.Diamond) {
        diamondPayoutOptions[msg.sender] = diamondPayoutRate;
    }
  }


==> User sets Trading pairs by providing wallet addresses of the token pairs to traded.

function setUserTradePairAddresses(address[3] memory tokenInAddresses, 
    address[3] memory tokenOutAddresses) 
    external onlyUserRole("TRADER") {
    // Store the asset pair addresses for the user's app stance.
    userTradePairAddresses[msg.sender] = TokenPair({
    tokenIn: tokenInAddresses,
    tokenOut: tokenOutAddresses,
    locked: true
    });
    // emit 'Token addresses set successful'
  }

==> User starts trade(arbitrage):

 // External

  function startArbitrage(address tokenIn, address tokenOut) external nonReentrant onlyRole(OWNER_ROLE || TRADER) whenNotPaused {
    // Add and start arbitrage for the specified pairs
    TokenPair[] memory pairs = new TokenPair[](3);
    pairs[0] = TokenPair({
    tokenIn: [tokenIn1, address(0), address(0)],
    tokenOut: [tokenOut1, address(0), address(0)],
    locked: false
    });
    pairs[1] = TokenPair({
    tokenIn: [tokenIn2, address(0), address(0)],
    tokenOut: [tokenOut2, address(0), address(0)],
    locked: false});
    pairs[2] = TokenPair({
    tokenIn: [tokenIn2, address(0), address(0)],
    tokenOut: [tokenOut2, address(0), address(0)],
    locked: false});

    // Add and start arbitrage for the specified pairs
    addAndStartArbitragePairs(pairs);
  }
    

  function addAndStartArbitragePairs(TokenPair[] memory pairs) external nonReentrant onlyRole(OWNER_ROLE || TRADER) whenNotPaused {
    bytes32[] memory opportunityIds = new bytes32[](pairs.length);

    for (uint i = 0; i < pairs.length; i++) {
      bytes32 id = keccak256(abi.encodePacked(pairs[i].tokenIn[0], pairs[i].tokenOut[0]));
      if (!arbitrageOpportunitySet[id]) {
        arbOpportunities[id] = ArbInfo(pairs[i].tokenIn[0], pairs[i].tokenOut[0]);
        arbitrageOpportunitySet[id] = true;
        emit ArbitragePairAdded(pairs[i].tokenIn[0], pairs[i].tokenOut[0]);
      }
    }

    // Execute all opportunities in the batch
    _executeBatchOpportunities(opportunityIds);

  }

======================================================================

User Management 

==> Payout

  //Profit Sharing and Payout
  //Calculate the user's share of the accumulated profit and sends it to their payout address.This function can be called periodically based on the payout interval (e.g., weekly or monthly). 

  function payoutProfit(address userAddress) external onlyOwner {
    User storage user = users[userAddress];
    require(user.subscription != SubscriptionPackage(0), "User not registered");

    // Calculate the user's share of the profit based on the subscription package and payout rate
    uint256 share;
    if (user.subscription == SubscriptionPackage.Silver) {
    // Silver package: subscription amount + 10%
    share = (subscriptionAmount + subscriptionAmount * 10 / 100) / subscriptionDuration;
    } else if (user.subscription == SubscriptionPackage.Gold) {
    // Gold package: subscription amount + 25%
    share = (subscriptionAmount + subscriptionAmount * 25 / 100) / subscriptionDuration;
    } else if (user.subscription == SubscriptionPackage.Diamond) {
    // Diamond package: Use the selected payout rate (0.5% to 5% of daily profit)
    uint256 payoutRate = diamondPayoutOptions[userAddress];
    // Calculate the daily profit and distribute the payout
    share = (calculateDailyProfit() * payoutRate) / 100;
    }

    // Check if the current time is within the payout period
    require(block.timestamp < user.subscriptionExpiry, "Subscription has expired");

    // Send the user's share of profit to their payout address
    // Deduct the profit from the accumulated pool
    // Implement the payout logic based on your requirements
  }

  //Subscription Renewal
  //Allow users to renew their subscriptions when they expire.

  function renewSubscription(uint256 subscriptionDuration) external {
    User storage user = users[msg.sender];
    require(user.subscription != SubscriptionCategory(0), "User not registered");
    require(block.timestamp >= user.subscriptionExpiry, "Subscription has not expired yet");

    // Calculate the new subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Update the user's subscription expiry timestamp
    user.subscriptionExpiry = expiryTimestamp;
  }


	//Sending Remaining Profits to App Owner
  //Implement a function that allows the app owner to withdraw the remaining profits when a user's subscription expires

  function withdrawRemainingProfits() external onlyOwner {
    require(block.timestamp >= user.subscriptionExpiry, "User's subscription has not expired yet");
    require(accumulatedProfits > 0, "No profits to withdraw");
  
    // Send the accumulated profits to the app owner's dedicated wallet address
    payable(owner).transfer(accumulatedProfits);
  
    // Reset the accumulated profits to zero
    accumulatedProfits = 0;
  }


==> Subscription Renewal

	//Subscription Renewal
  //Allow users to renew their subscriptions when they expire.

  function renewSubscription(uint256 subscriptionDuration) external {
    User storage user = users[msg.sender];
    require(user.subscription != SubscriptionCategory(0), "User not registered");
    require(block.timestamp >= user.subscriptionExpiry, "Subscription has not expired yet");

    // Calculate the new subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Update the user's subscription expiry timestamp
    user.subscriptionExpiry = expiryTimestamp;
  }


===================================================================

Other User related functions


mapping(address => User) public users;

  mapping(address => TokenPair) public userTradePairAddresses;

  mapping(address => uint256) public userIds;

  mapping(string => address) public emailToAddress;

  mapping(address => mapping(address => User)) public tokenToUser;

  mapping(address => bool) public userRoles; 

/ Mapping to track arbitrage opportunities for each pair
  mapping(bytes32 => bool) public arbitrageOpportunitySet;

  // Arbitrage opportunity mapping
  mapping(bytes32 => ArbInfo) public arbOpportunities;
  mapping(uint256 => ArbBatch) public pendingBatches;

  // Token mappings
  mapping(address => TokenInfo) public tokens;
  
  // User roles mapping
  mapping(address => bytes32) public userRoles;
  mapping(address => bool) public userRoles;

struct User {
    SubscriptionCategory subscription;
    address payoutAddress;
    uint256 subscriptionExpiry; // Timestamp when the subscription expires
  }

struct TokenPair {
    address[3] tokenIn;
    address[3] tokenOut;
    bool locked; // Flag to indicate if the user can update their addresses
  }

  TokenPair tokenPairs = TokenPair({
    tokenIn: [
      // Token 1 address
      // Token 2 address
      // Token 3 address
    ],
    tokenOut: [
      // Token 1 address
      // Token 2 address
      // Token 3 address
    ]
  });


/* ========== CONSTRUCTOR ========== */

  // Constructor
  constructor(address _priceFeed, address _uniswapRouter, address _lendingPool, address _profitAccount) {
    owner = msg.sender;
    priceFeed = AggregatorV3Interface(_priceFeed);
    uniswapRouter = IUniswapV2Router02(_uniswapRouter);
    lendingPool = ILendingPool(_lendingPool);
    profitAccount = _profitAccount;
    // Grant deployer the default admin role
    userRoles[msg.sender] = OWNER_ROLE; 
    // Initialize the gas estimator.
    gasEstimator = new GasEstimator();
  }

// External

  function startArbitrage(address tokenIn, address tokenOut) external nonReentrant onlyRole(OWNER_ROLE || TRADER) whenNotPaused {
    // Add and start arbitrage for the specified pairs
    TokenPair[] memory pairs = new TokenPair[](3);
    pairs[0] = TokenPair({
    tokenIn: [tokenIn1, address(0), address(0)],
    tokenOut: [tokenOut1, address(0), address(0)],
    locked: false
    });
    pairs[1] = TokenPair({
    tokenIn: [tokenIn2, address(0), address(0)],
    tokenOut: [tokenOut2, address(0), address(0)],
    locked: false});
    pairs[2] = TokenPair({
    tokenIn: [tokenIn2, address(0), address(0)],
    tokenOut: [tokenOut2, address(0), address(0)],
    locked: false});

    // Add and start arbitrage for the specified pairs
    addAndStartArbitragePairs(pairs);
  }
    

  function addAndStartArbitragePairs(TokenPair[] memory pairs) external nonReentrant onlyRole(OWNER_ROLE || TRADER) whenNotPaused {
    bytes32[] memory opportunityIds = new bytes32[](pairs.length);

    for (uint i = 0; i < pairs.length; i++) {
      bytes32 id = keccak256(abi.encodePacked(pairs[i].tokenIn[0], pairs[i].tokenOut[0]));
      if (!arbitrageOpportunitySet[id]) {
        arbOpportunities[id] = ArbInfo(pairs[i].tokenIn[0], pairs[i].tokenOut[0]);
        arbitrageOpportunitySet[id] = true;
        emit ArbitragePairAdded(pairs[i].tokenIn[0], pairs[i].tokenOut[0]);
      }
    }

    // Execute all opportunities in the batch
    _executeBatchOpportunities(opportunityIds);

  }

  function createArbBatch(bytes32[] calldata opportunityIds, 
    address[3] calldata tokenInAddresses,
    address[3] calldata tokenOutAddresses
    ) external nonReentrant onlyRole(OWNER_ROLE || TRADER) 
    whenNotPaused {
    uint256 batchId = nextBatchId++;
    pendingBatches[batchId].batchOpportunities = opportunityIds;
    pendingBatches[batchId].tokenPairAddress = tokenInAddresses;
    pendingBatches[batchId].tokenOutAddress = tokenOutAddresses;
  }

  function setUserTradePairAddresses(address[3] memory tokenInAddresses, 
    address[3] memory tokenOutAddresses) 
    external onlyUserRole("TRADER") {
    // Store the asset pair addresses for the user's app stance.
    userTradePairAddresses[msg.sender] = TokenPair({
    tokenIn: tokenInAddresses,
    tokenOut: tokenOutAddresses,
    locked: true
    });
    // emit 'Token addresses set successful'
  }

  function updateUserTradePairAddresses(
    address token,
    address[3] memory tokenIn,
    address[3] memory tokenOut,
    bool locked
    ) public onlyUserRole("OWNER") {
    require(msg.sender == users[msg.sender].id, "Unauthorized access");
    users[msg.sender].userTradePairAddresses[token] = TokenPair({
        tokenIn: tokenIn,
        tokenOut: tokenOut,
        locked: locked
    });
  }

 // Create an arbitrage batch with the asset pair addresses.
  smartContract.createArbBatch(opportunityIds, tokenInAddresses, tokenOutAddresses);

  function unlockTradePairAddresses(address userAddress) external onlyOwner {
    userTradePairAddresses[userAddress].locked = false;
  }

  function addTrader(address trader) external onlyOwner {
    traders[trader] = true; 
  }

  function removeTrader(address trader) external onlyOwner {
    traders[trader] = false;
  }

  function _executeBatchOpportunities(bytes32[] memory opportunityIds) internal {
    // Create a new batch with the opportunity IDs
    createArbBatch(opportunityIds);

    for (uint i = 0; i < opportunityIds.length; i++) {
        _executeSingleArb(opportunityIds[i]);
    }
  }

  /* ======= User Details ===========*/

  //Define Subscription Categories
  //Use enumerations to define the different subscription categories

  enum SubscriptionPackage { Silver, Gold, Diamond }

  // Payout rates for each package
  mapping(SubscriptionPackage => uint256) public payoutRates;

  // Additional mapping for Diamond package options
  mapping(address => uint256) public diamondPayoutOptions;


  //Define User Struct
  //User struct to store user-related data, including their subscription category and payout address

  struct User {
    // Unique user ID
    uint256 id;

    // Subscription category
    SubscriptionCategory subscription;

    // Payout address for received rewards
    address payoutAddress;

    // Timestamp when the subscription expires
    uint256 subscriptionExpiry;

    // Mapping to store user-defined trade pair addresses
    mapping(address => TokenPair) userTradePairAddresses;
  }


  //User Registration
  //Implement a function that allows users to register, specifying their name, email, subscription category, payout address, and subscription duration. The contract owner (you) can assign Diamond status to certain users.

  function registerUser(
    string memory name,
    string memory email,
    SubscriptionPackage subscription,
    address payoutAddress,
    uint256 subscriptionDuration,
    uint256 diamondPayoutRate // Only for Diamond users
    ) external {
    require(subscriptionDuration > 0, "Subscription duration must be greater than 0");

    // Check if the user is eligible for Diamond status
    if (msg.sender == owner) {
    require(subscription == SubscriptionPackage.Diamond, "Only the owner can assign Diamond status");
    }

    // Calculate the subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Create a new user and store their information
    users[msg.sender] = User({
    name: name,
    email: email,
    subscription: subscription,
    payoutAddress: payoutAddress,
    subscriptionExpiry: expiryTimestamp
    });

    // Set the payout rate for Diamond users (if applicable)
    if (subscription == SubscriptionPackage.Diamond) {
        diamondPayoutOptions[msg.sender] = diamondPayoutRate;
    }
  }

  modifier onlyAdmin() {
  require(hasRole(msg.sender, "admin"), "Admin access required");
  _;
  }

  function setSubscriptionExpiry(uint256 expiration) public onlyAdmin {
  userMap[msg.sender].subscriptionExpiry = expiration;
  }

modifier onlyUserRole(string memory role) {
   require(userRoles[msg.sender], role);
   _;
  }

  // Modifier for "TRADER" role
  modifier onlyUserRole(string memory role) {
    require(userRoles[msg.sender] == keccak256(bytes(role)), "Access denied");
    _;
  }

  function setUserRole(address userAddress, string memory role) external onlyOwner {
    userRoles[userAddress] = role;
  }

function hasRole(bytes32 role, address user) view returns (bool) {
  return userRoles[user] == role; 
  }

// Create an arbitrage batch with the asset pair addresses.
  smartContract.createArbBatch(opportunityIds, tokenInAddresses, tokenOutAddresses);

  function unlockTradePairAddresses(address userAddress) external onlyOwner {
    userTradePairAddresses[userAddress].locked = false;
  }

  //Profit Sharing and Payout
  //Calculate the user's share of the accumulated profit and sends it to their payout address.This function can be called periodically based on the payout interval (e.g., weekly or monthly). 

  function payoutProfit(address userAddress) external onlyOwner {
    User storage user = users[userAddress];
    require(user.subscription != SubscriptionPackage(0), "User not registered");

    // Calculate the user's share of the profit based on the subscription package and payout rate
    uint256 share;
    if (user.subscription == SubscriptionPackage.Silver) {
    // Silver package: subscription amount + 10%
    share = (subscriptionAmount + subscriptionAmount * 10 / 100) / subscriptionDuration;
    } else if (user.subscription == SubscriptionPackage.Gold) {
    // Gold package: subscription amount + 25%
    share = (subscriptionAmount + subscriptionAmount * 25 / 100) / subscriptionDuration;
    } else if (user.subscription == SubscriptionPackage.Diamond) {
    // Diamond package: Use the selected payout rate (0.5% to 5% of daily profit)
    uint256 payoutRate = diamondPayoutOptions[userAddress];
    // Calculate the daily profit and distribute the payout
    share = (calculateDailyProfit() * payoutRate) / 100;
    }

    // Check if the current time is within the payout period
    require(block.timestamp < user.subscriptionExpiry, "Subscription has expired");

    // Send the user's share of profit to their payout address
    // Deduct the profit from the accumulated pool
    // Implement the payout logic based on your requirements
  }

  //Subscription Renewal
  //Allow users to renew their subscriptions when they expire.

  function renewSubscription(uint256 subscriptionDuration) external {
    User storage user = users[msg.sender];
    require(user.subscription != SubscriptionCategory(0), "User not registered");
    require(block.timestamp >= user.subscriptionExpiry, "Subscription has not expired yet");

    // Calculate the new subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Update the user's subscription expiry timestamp
    user.subscriptionExpiry = expiryTimestamp;
  }

  //Sending Remaining Profits to App Owner
  //Implement a function that allows the app owner to withdraw the remaining profits when a user's subscription expires

  function withdrawRemainingProfits() external onlyOwner {
    require(block.timestamp >= user.subscriptionExpiry, "User's subscription has not expired yet");
    require(accumulatedProfits > 0, "No profits to withdraw");
  
    // Send the accumulated profits to the app owner's dedicated wallet address
    payable(owner).transfer(accumulatedProfits);
  
    // Reset the accumulated profits to zero
    accumulatedProfits = 0;
  }


==============================================================

New user code

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ProfitSharing {
    address public owner;
    uint256 public profitPayoutPercentage;
    uint256 public paymentInterval; // Payment interval in seconds
    uint256 public lastPayoutTimestamp;

    enum ProfitCalculationMethod { DailyProfit, TermAmount }
    ProfitCalculationMethod public calculationMethod;

    // Mapping to store user balances
    mapping(address => uint256) public userBalances;

    constructor() {
        owner = msg.sender;
        profitPayoutPercentage = 5; // Default profit payout percentage (adjust as needed)
        paymentInterval = 1 days; // Default payment interval (adjust as needed)
        calculationMethod = ProfitCalculationMethod.DailyProfit; // Default calculation method
        lastPayoutTimestamp = block.timestamp;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Function to set the profit payout percentage
    function setProfitPayoutPercentage(uint256 percentage) external onlyOwner {
        require(percentage <= 100, "Percentage must be <= 100");
        profitPayoutPercentage = percentage;
    }

    // Function to set the payment interval in days
    function setPaymentIntervalInDays(uint256 intervalInDays) external onlyOwner {
    // Calculate the seconds equivalent for the given number of days
    paymentInterval = intervalInDays * 1 days;
}

    // Function to set the profit calculation method
    function setProfitCalculationMethod(ProfitCalculationMethod method) external onlyOwner {
        calculationMethod = method;
    }

    // Function to distribute profits
    function distributeProfits() external {
        require(block.timestamp >= lastPayoutTimestamp + paymentInterval, "Not yet time for another payout");

        // Calculate total profit (for example, from trading activities)
        uint256 totalProfit = calculateTotalProfit();

        // Iterate through users and distribute profits
        for (uint256 i = 0; i < users.length; i++) {
            address userAddress = users[i];
            uint256 userTermAmount = getUserTermAmount(userAddress); // Replace with actual function
            uint256 userShare = calculateProfitShare(userTermAmount, totalProfit);
            userBalances[userAddress] += userShare;
        }

        lastPayoutTimestamp = block.timestamp;
    }

    // ... (Other functions related to profit calculation and user balances)

    // Function to calculate the total profit (replace with actual logic)
    function calculateTotalProfit() internal view returns (uint256) {
        // Replace with actual logic to calculate total profit
        // For example, querying external contracts, calculating from trades, etc.
        return 1000; // Placeholder value, replace with actual calculation
    }
}
