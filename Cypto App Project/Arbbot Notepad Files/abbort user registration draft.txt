

// Owner
address public owner;

// Modifiers
modifier onlyOwner() {
  require(msg.sender == owner, "Not owner");
  _;
}

// Constructor
constructor() {
  owner = msg.sender; 
}


struct TokenPair {
    address[3] tokenIn;
    address[3] tokenOut;
    bool locked;
  }

TokenPair tokenPairs = TokenPair({
    tokenIn: [
      // Token 1 address
      // Token 2 address
      // Token 3 address
    ],
    tokenOut: [
      // Token 1 address
      // Token 2 address
      // Token 3 address
    ]
  });

function setUserTradePairAddresses(address[3] calldata tokenInAddresses, 
    address[3] calldata tokenOutAddresses) 
    external onlyUserRole("TRADER") {
    // Store the asset pair addresses for the user's app stance.
    userTradePairAddresses[msg.sender] = TokenPair({
    tokenIn: tokenInAddresses,
    tokenOut: tokenOutAddresses,
    locked: true
    });
  }

  // Get the asset pair addresses for the user's app stance.
  address[3] calldata tokenInAddresses = userTradePairAddresses[msg.sender].tokenIn;
  address[3] calldata tokenOutAddresses = userTradePairAddresses[msg.sender].tokenOut;


/* ========== EXTERNAL FUNCTIONS ========== */
   
  bool locked = false;

  function externalCall() external {
    require(!locked, "No reentrancy");
    locked = true;
    // Interact with external contract
    locked = false;
  }

  // External

  function startArbitrage(address tokenIn, address tokenOut) external nonReentrant onlyRole(OWNER_ROLE || TRADER) whenNotPaused {
    // Add and start arbitrage for the specified pairs
    TokenPair[] memory pairs = new TokenPair[](3);
    pairs[0] = TokenPair({
    tokenIn: [tokenIn1, address(0), address(0)],
    tokenOut: [tokenOut1, address(0), address(0)],
    locked: false
    });
    pairs[1] = TokenPair({
    tokenIn: [tokenIn2, address(0), address(0)],
    tokenOut: [tokenOut2, address(0), address(0)],
    locked: false});
    pairs[2] = TokenPair({
    tokenIn: [tokenIn2, address(0), address(0)],
    tokenOut: [tokenOut2, address(0), address(0)],
    locked: false});

    // Add and start arbitrage for the specified pairs
    addAndStartArbitragePairs(pairs);
  }
    

  function addAndStartArbitragePairs(TokenPair[] memory pairs) external nonReentrant onlyRole(OWNER_ROLE || TRADER) whenNotPaused {
    bytes32[] memory opportunityIds = new bytes32[](pairs.length);

    for (uint i = 0; i < pairs.length; i++) {
      bytes32 id = keccak256(abi.encodePacked(pairs[i].tokenIn[0], pairs[i].tokenOut[0]));
      if (!arbitrageOpportunitySet[id]) {
        arbOpportunities[id] = ArbInfo(pairs[i].tokenIn[0], pairs[i].tokenOut[0]);
        arbitrageOpportunitySet[id] = true;
        emit ArbitragePairAdded(pairs[i].tokenIn[0], pairs[i].tokenOut[0]);
      }
    }

    // Execute all opportunities in the batch
    _executeBatchOpportunities(opportunityIds);

  }
  
  function createArbBatch(bytes32[] calldata opportunityIds, 
    address[3] calldata tokenInAddresses,
    address[3] calldata tokenOutAddresses
    ) external nonReentrant onlyRole(OWNER_ROLE || TRADER) 
    whenNotPaused {
    uint256 batchId = nextBatchId++;
    pendingBatches[batchId].batchOpportunities = opportunityIds;
    pendingBatches[batchId].tokenPairAddress = tokenInAddresses;
    pendingBatches[batchId].tokenOutAddress = tokenOutAddresses;
  }

  

  function setUserTradePairAddresses(address[3] memory tokenInAddresses, 
    address[3] memory tokenOutAddresses) 
    external onlyUserRole("TRADER") {
    // Store the asset pair addresses for the user's app stance.
    userTradePairAddresses[msg.sender] = TokenPair({
    tokenIn: tokenInAddresses,
    tokenOut: tokenOutAddresses,
    locked: true
    });
  }

  // Get the asset pair addresses for the user's app stance.
  address[3] memory tokenInAddresses = userTradePairAddresses[msg.sender].tokenIn;
  address[3] memory tokenOutAddresses = userTradePairAddresses[msg.sender].tokenOut;

  // Create an arbitrage batch with the asset pair addresses.
  smartContract.createArbBatch(opportunityIds, tokenInAddresses, tokenOutAddresses);

  function unlockTradePairAddresses(address userAddress) external onlyOwner {
    userTradePairAddresses[userAddress].locked = false;
  }

===========================================================


function _getMinimumOutputAmount(uint inputAmount) public view returns (uint) {

  ArbInfo memory info = arbOpportunities[id];

  uint estimatedOutput = _estimateOutput(info);

  uint slippageAmount = estimatedOutput * slippageTolerance / 1000;

  uint minimumOutput = estimatedOutput - slippageAmount;

  require(minimumOutput > 0, "Output amount too low");

  return minimumOutput;
  
}



function _estimateOutput(ArbInfo memory info) internal view returns (uint) {

  uint spotPrice = getSpotPrice(info.tokenIn, info.tokenOut);
  
  uint outputAmount = spotPrice * inputAmount;

  return outputAmount;

}


============================================================

/* ======= User Details ===========*/

  //Define Subscription Categories
  //Use enumerations to define the different subscription categories

  enum SubscriptionPackage { Silver, Gold, Diamond }

  // Payout rates for each package
  mapping(SubscriptionPackage => uint256) public payoutRates;

  // Additional mapping for Diamond package options
  mapping(address => uint256) public diamondPayoutOptions;

modifier onlyAdmin() {
  require(hasRole(msg.sender, "admin"), "Admin access required");
  _;
  }

  function setSubscriptionExpiry(uint256 expiration) public onlyAdmin {
  userMap[msg.sender].subscriptionExpiry = expiration;
  }


  //Define User Struct
  //User struct to store user-related data, including their subscription category and payout address

  struct User {
    // Unique user ID
    uint256 id;

    // Subscription category
    SubscriptionCategory subscription;

    // Payout address for received rewards
    address payoutAddress;

    // Timestamp when the subscription expires
    uint256 subscriptionExpiry;

    // Mapping to store user-defined trade pair addresses
    mapping(address => TokenPair) userTradePairAddresses;
  }


  //User Registration
  //Implement a function that allows users to register, specifying their name, email, subscription category, payout address, and subscription duration. The contract owner (you) can assign Diamond status to certain users.

  function registerUser(
    string memory name,
    string memory email,
    SubscriptionPackage subscription,
    address payoutAddress,
    uint256 subscriptionDuration,
    uint256 diamondPayoutRate // Only for Diamond users
    ) external {
    require(subscriptionDuration > 0, "Subscription duration must be greater than 0");

    // Check if the user is eligible for Diamond status
    if (msg.sender == owner) {
    require(subscription == SubscriptionPackage.Diamond, "Only the owner can assign Diamond status");
    }

    // Calculate the subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Create a new user and store their information
    users[msg.sender] = User({
    name: name,
    email: email,
    subscription: subscription,
    payoutAddress: payoutAddress,
    subscriptionExpiry: expiryTimestamp
    });

    // Set the payout rate for Diamond users (if applicable)
    if (subscription == SubscriptionPackage.Diamond) {
        diamondPayoutOptions[msg.sender] = diamondPayoutRate;
    }
  }

  modifier onlyAdmin() {
  require(hasRole(msg.sender, "admin"), "Admin access required");
  _;
  }

  function setSubscriptionExpiry(uint256 expiration) public onlyAdmin {
  userMap[msg.sender].subscriptionExpiry = expiration;
  }


  //Profit Sharing and Payout
  //Calculate the user's share of the accumulated profit and sends it to their payout address.This function can be called periodically based on the payout interval (e.g., weekly or monthly). 

  function payoutProfit(address userAddress) external onlyOwner {
    User storage user = users[userAddress];
    require(user.subscription != SubscriptionPackage(0), "User not registered");

    // Calculate the user's share of the profit based on the subscription package and payout rate
    uint256 share;
    if (user.subscription == SubscriptionPackage.Silver) {
    // Silver package: subscription amount + 10%
    share = (subscriptionAmount + subscriptionAmount * 10 / 100) / subscriptionDuration;
    } else if (user.subscription == SubscriptionPackage.Gold) {
    // Gold package: subscription amount + 25%
    share = (subscriptionAmount + subscriptionAmount * 25 / 100) / subscriptionDuration;
    } else if (user.subscription == SubscriptionPackage.Diamond) {
    // Diamond package: Use the selected payout rate (0.5% to 5% of daily profit)
    uint256 payoutRate = diamondPayoutOptions[userAddress];
    // Calculate the daily profit and distribute the payout
    share = (calculateDailyProfit() * payoutRate) / 100;
    }

    // Check if the current time is within the payout period
    require(block.timestamp < user.subscriptionExpiry, "Subscription has expired");

    // Send the user's share of profit to their payout address
    // Deduct the profit from the accumulated pool
    // Implement the payout logic based on your requirements
  }

  //Subscription Renewal
  //Allow users to renew their subscriptions when they expire.

  function renewSubscription(uint256 subscriptionDuration) external {
    User storage user = users[msg.sender];
    require(user.subscription != SubscriptionCategory(0), "User not registered");
    require(block.timestamp >= user.subscriptionExpiry, "Subscription has not expired yet");

    // Calculate the new subscription expiry timestamp
    uint256 expiryTimestamp = block.timestamp + subscriptionDuration;

    // Update the user's subscription expiry timestamp
    user.subscriptionExpiry = expiryTimestamp;
  }
 
function setUserTradePairAddresses(address[3] memory tokenInAddresses, 
    address[3] memory tokenOutAddresses) 
    external onlyUserRole("TRADER") {
    // Store the asset pair addresses for the user's app stance.
    userTradePairAddresses[msg.sender] = TokenPair({
    tokenIn: tokenInAddresses,
    tokenOut: tokenOutAddresses,
    locked: true
    });
  }

  function updateUserTradePairAddresses(
    address token,
    address[3] memory tokenIn,
    address[3] memory tokenOut,
    bool locked
    ) public onlyUserRole("OWNER") {
    require(msg.sender == users[msg.sender].id, "Unauthorized access");
    users[msg.sender].userTradePairAddresses[token] = TokenPair({
        tokenIn: tokenIn,
        tokenOut: tokenOut,
        locked: locked
    });
  }




